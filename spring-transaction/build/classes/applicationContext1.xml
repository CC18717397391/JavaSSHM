<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
     xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
     xmlns:context="http://www.springframework.org/schema/context"
     xmlns:aop="http://www.springframework.org/schema/aop"
     xmlns:tx="http://www.springframework.org/schema/tx"
     xmlns:task="http://www.springframework.org/schema/task"
     xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-3.1.xsd
         http://www.springframework.org/schema/aop
         http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
         http://www.springframework.org/schema/tx
         http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
         http://www.springframework.org/schema/task
		 http://www.springframework.org/schema/task/spring-task-3.1.xsd">

	<!-- 引入外部的属性文件 -->
	<context:property-placeholder location="classpath:jdbc.properties"/>
	
	<!-- 配置c3p0连接池,从引入的外部文件中获取连接信息；该操作其实是覆盖class对应的底层连接池并注入进去，以后调用就是使用新定义的 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- 配置业务层bean -->
	<bean id="accountService" class="com.zs.spring.demo1.AccountServiceImpl">
		<property name="accountDao" ref="accountDao" />
		<!-- 注入最下方定义的事务管理器的模板给bean，用来在代码中管理事务 -->
		<property name="transactionTemplate" ref="transactionTemplate" />
	</bean>
	
	<!-- 配置DAO层bean(简化，直接注入上面覆盖底层的连接池，因为源码中注入连接池的set方法，同时自动加上了模板，会自动配置JdbcTemplate；DAO代码中类继承了JdbcDaoSupport就可以get调用模板) -->
	<bean id="accountDao" class="com.zs.spring.demo1.AccountDaoImpl">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	
	<!-- 配置DAO类(未简化，覆盖配置底层jdbc的模板，给里面注入连接池，然后DAO继承JdbcDaoSupport就引用我们覆盖的模板就带上了新配置的连接池) -->
	<!-- 
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<bean id="accountDao" class="com.zs.spring.demo1.AccountDaoImpl">
		<property name="jdbcTemplate" ref="jdbcTemplate" />
	</bean> -->
	
	
	
	<!-- ==================================1.编程式的事务管理=============================================== -->
	<!-- 1.配置事务管理器 ，class引擎是使用jdbc时引入的事务管理的类，jdbc模式事务管理使用connection-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 2.配置事务管理的模板:  Spring为了简化事务管理的代码而提供的类，-->
	<bean id="transactionTemplate" class="org.springframework.transaction.support.TransactionTemplate">
		<property name="transactionManager" ref="transactionManager"/>
		<!-- 此处定义个模板， 把真正的事务管理的类【1】引入这里 ，  就成为真正的事务管理器 -->
	</bean>
	
</beans>
